============= INTEGER_CONSTANT TESTS =================
---------- INPUT -----------
10289
+21372
-2384384
0990
0
0
-38636
--7U8675
uiUB
---------- OUTPUT ----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<INTEGER_CONSTANT, 10289>
<INTEGER_CONSTANT, +21372>
<INTEGER_CONSTANT, -2384384>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, 990>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, -38636>
<INTEGER_CONSTANT, -7>
<IDENTIFIER, U8675>
<IDENTIFIER, uiUB>
============= CHAR_SEQUENCE TESTS =================
---------- INPUT -----------
char byte = 'a';
char ligy = 'f';
asj s; 'a's

's'

's'
char SKDH = 'Ss';
---------- OUTPUT ----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<KEYWORD, char>
<IDENTIFIER, byte>
<CHARACTER_CONSTANT, 'a'>
<KEYWORD, char>
<IDENTIFIER, ligy>
<CHARACTER_CONSTANT, 'f'>
<IDENTIFIER, asj>
<IDENTIFIER, s>
<CHARACTER_CONSTANT, 'a'>
<IDENTIFIER, s>
<CHARACTER_CONSTANT, 's'>
<CHARACTER_CONSTANT, 's'>
<KEYWORD, char>
<IDENTIFIER, SKDH>
<CHARACTER_CONSTANT, 'Ss'>


============= STRING_CONSTANT & PUNCTUATOR TESTS =================
---------- INPUT -----------
my_string = "This is a \"quoted\" word."
int main() {
    int x = 2;
    int y = 3;
    int z;
    z = x + y;
    printInt(x);
    printStr("+");
    printInt(y);
    printStr(" = ");
    printInt(z);
    printStr("Is this the real life? Is this just fantasy?");
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, =>
<INTEGER_CONSTANT, 2>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, =>
<INTEGER_CONSTANT, 3>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, ;>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, x>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, "+">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, y>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, " = ">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, "Is this the real life? Is this just fantasy?">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>

============= SINGLE_LINE_COMMENT TESTS =================
---------- INPUT -----------
// Add two numbers from input
int main() {
    int x;
    int y;
    int z = x + y;
    printInt(z);
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<COMMENT, // Add two numbers from input>
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>

============= MULTI_LINE_COMMENT TESTS =================
---------- INPUT -----------
// Add two numbers from input
int main() {
    int x;
    int y;
    int z = x + y;
    /* This is an example of a multi-line comment
    This is the second line of the comment */
    printInt(z);
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<COMMENT, // Add two numbers from input>
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<COMMENT, /* This is an example of a multi-line comment
    This is the second line of the comment */>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>


============= FINAL TESTS =================
int arr[10]; // Sorted array to search
// A recursive binary search function. It returns location of x
// in given array arr[l..r] is present, otherwise -1
int binarySearch(int l, int r, int x) {
    if (r >= l) {
        int mid = l + (r - l) / 2;
        // If the element is present at the middle itself
        if (arr[mid] == x)
            return mid;
        // If element is smaller than mid, then it can only be present in left subarray
        if (arr[mid] > x)
            return binarySearch(l, mid - 1, x);
        // Else the element can only be present in right subarray
        return binarySearch(mid + 1, r, x);
    }
    // We reach here when element is not present in array
    return -1;
}
int main() {
    int n = 5; // Number of elements
    arr[0] = 2;
    arr[1] = 3;
    arr[2] = 4;
    arr[3] = 10;
    arr[4] = 40;
    int x = 10; // Key to search
    int result = binarySearch(0, n - 1, x);
    if (result == -1)
        printStr("Element is not present in array");
    else {
        printStr("Element is present at index ");
        printInt(result);
    }
    return 0;
}