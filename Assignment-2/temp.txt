============= INTEGER_CONSTANT TESTS =================
---------- INPUT -----------
10289
+21372
-2384384
0990
0
0
-38636
--7U8675
uiUB
---------- OUTPUT ----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<INTEGER_CONSTANT, 10289>
<INTEGER_CONSTANT, +21372>
<INTEGER_CONSTANT, -2384384>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, 990>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, 0>
<INTEGER_CONSTANT, -38636>
<INTEGER_CONSTANT, -7>
<IDENTIFIER, U8675>
<IDENTIFIER, uiUB>
============= CHAR_SEQUENCE TESTS =================
---------- INPUT -----------
char byte = 'a';
char ligy = 'f';
asj s; 'a's

's'

's'
char SKDH = 'Ss';
---------- OUTPUT ----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<KEYWORD, char>
<IDENTIFIER, byte>
<CHARACTER_CONSTANT, 'a'>
<KEYWORD, char>
<IDENTIFIER, ligy>
<CHARACTER_CONSTANT, 'f'>
<IDENTIFIER, asj>
<IDENTIFIER, s>
<CHARACTER_CONSTANT, 'a'>
<IDENTIFIER, s>
<CHARACTER_CONSTANT, 's'>
<CHARACTER_CONSTANT, 's'>
<KEYWORD, char>
<IDENTIFIER, SKDH>
<CHARACTER_CONSTANT, 'Ss'>


============= STRING_CONSTANT & PUNCTUATOR TESTS =================
---------- INPUT -----------
int main() {
    int x = 2;
    int y = 3;
    int z;
    z = x + y;
    printInt(x);
    printStr("+");
    printInt(y);
    printStr(" = ");
    printInt(z);
    printStr("Is this the real life? Is this just fantasy?");
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, =>
<INTEGER_CONSTANT, 2>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, =>
<INTEGER_CONSTANT, 3>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, ;>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, x>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, "+">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, y>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, " = ">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<IDENTIFIER, printStr>
<PUNCTUATOR, (>
<STRING_LITERAL, "Is this the real life? Is this just fantasy?">
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>

============= SINGLE_LINE_COMMENT TESTS =================
---------- INPUT -----------
// Add two numbers from input
int main() {
    int x;
    int y;
    int z = x + y;
    printInt(z);
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<COMMENT, // Add two numbers from input>
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>

============= MULTI_LINE_COMMENT TESTS =================
---------- INPUT -----------
// Add two numbers from input
int main() {
    int x;
    int y;
    int z = x + y;
    /* This is an example of a multi-line comment
    This is the second line of the comment */
    printInt(z);
    return 0;
}
---------- OUTPUT -----------
flex -o 3_A2.yy.c 3_A2.l
gcc 3_A2.yy.c 3_A2.c -ll -o 3_A2.out
./3_A2.out < 3_A2.nc
<COMMENT, // Add two numbers from input>
<KEYWORD, int>
<IDENTIFIER, main>
<PUNCTUATOR, (>
<PUNCTUATOR, )>
<PUNCTUATOR, {>
<KEYWORD, int>
<IDENTIFIER, x>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<KEYWORD, int>
<IDENTIFIER, z>
<PUNCTUATOR, =>
<IDENTIFIER, x>
<PUNCTUATOR, +>
<IDENTIFIER, y>
<PUNCTUATOR, ;>
<COMMENT, /* This is an example of a multi-line comment
    This is the second line of the comment */>
<IDENTIFIER, printInt>
<PUNCTUATOR, (>
<IDENTIFIER, z>
<PUNCTUATOR, )>
<PUNCTUATOR, ;>
<KEYWORD, return>
<INTEGER_CONSTANT, 0>
<PUNCTUATOR, ;>
<PUNCTUATOR, }>